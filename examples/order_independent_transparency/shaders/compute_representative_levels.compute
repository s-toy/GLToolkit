#version 460 core
#define USE_IN_COMPUTE_SHADER
#include "WOIT_common.glsl"

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(binding = 2, r32ui) uniform uimage2D uWaveletCoeffPDFImage;
layout(binding = 3, r32f) uniform image2D uRepresentativeDataImage;

const int N = 1000;

void main()
{
	int coord = int(gl_GlobalInvocationID.x);
	float leftBoundary = imageLoad(uRepresentativeDataImage, ivec2(coord, 0)).x;
	float rightBoundary = imageLoad(uRepresentativeDataImage, ivec2(coord + 1, 0)).x;
	float mumerator = 0;
	float denominator = 0;

	for (int k = 0; k < N; ++k)
	{
		float x = leftBoundary * float(k) / float(N) + rightBoundary * float(N - k) / float(N);
		int sliceIndex = int(floor(float(PDF_SLICE_COUNT * PDF_SLICE_COUNT) * (x - _IntervalMin) / (_IntervalMax - _IntervalMin)));
		sliceIndex = clamp(sliceIndex, 0, PDF_SLICE_COUNT * PDF_SLICE_COUNT - 1);
		ivec2 coord = ivec2(sliceIndex / PDF_SLICE_COUNT, sliceIndex % PDF_SLICE_COUNT);
		float p = float(imageLoad(uWaveletCoeffPDFImage, coord).x);

		mumerator += x * p;
		denominator += p;
	}

	float representativeLevel = 0;
	if (denominator < 1e-6)
		representativeLevel = 0.5 * (leftBoundary + rightBoundary);
	else
		representativeLevel = mumerator / denominator;

	imageStore(uRepresentativeDataImage, ivec2(coord, 1), vec4(representativeLevel, 0, 0, 0));
}