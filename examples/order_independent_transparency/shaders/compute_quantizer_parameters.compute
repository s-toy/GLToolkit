#version 460 core
#define USE_IN_COMPUTE_SHADER
#include "WOIT_common.glsl"

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(binding = 2, r32ui)	 uniform uimage2D	uPDFImage;
layout(binding = 3, rgba16f) uniform image2D	uDefaultQuantizerParamsImage;

uniform int	uTileCountW;

void main()
{
	ivec2 tileCoord = ivec2(gl_GlobalInvocationID.xy);
	int tileIndex = tileCoord.y * uTileCountW + tileCoord.x;

	float minValue = _IntervalMin;
	float maxValue = _IntervalMax;
	float delta = 0.1;

	for (int i = 0; i < PDF_SLICE_COUNT; ++i)
	{
		uint pCount = imageLoad(uPDFImage, ivec2(tileIndex, i)).r;
		if (pCount != 0)
		{
			minValue = float(i) / float(PDF_SLICE_COUNT) * (_IntervalMax - _IntervalMin) + _IntervalMin;
			break;
		}
	}

	for (int i = PDF_SLICE_COUNT - 1; i >= 0; --i)
	{
		uint pCount = imageLoad(uPDFImage, ivec2(tileIndex, i)).r;
		if (pCount != 0)
		{
			maxValue = float(i) / float(PDF_SLICE_COUNT) * (_IntervalMax - _IntervalMin) + _IntervalMin;
			break;
		}
	}

	delta = (maxValue - minValue) / 253;

	imageStore(uDefaultQuantizerParamsImage, ivec2(tileIndex, 0), vec4(minValue, maxValue, delta, 0));
}